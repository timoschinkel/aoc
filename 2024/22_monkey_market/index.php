<?php

declare(strict_types=1);

namespace Timoschinkel\Aoc2024\Day22;

require_once dirname(__DIR__) . DIRECTORY_SEPARATOR . 'Stopwatch.php';

$input = __DIR__ . DIRECTORY_SEPARATOR . ($argv[1] ?? 'example') . '.txt';

$rows = array_filter(explode(PHP_EOL, file_get_contents($input)));

// Read input
$numbers = array_map('intval', $rows);

$sw = new \Stopwatch();

/**
 * Idea one; let's just implement the rules. Within 10 iterations I exceeded the maximum value of a 64-bit integer in
 * PHP. I was able to rewrite to GMP. The runtime is approx. 5 seconds, which is too much, but it does get an answer.
 * 
 * @param int[] $numbers
 * @return \GMP
 */
function part_one(array $numbers): \GMP {
    $sum = gmp_init(0);

    foreach ($numbers as $number) {
        $original = $number;
        $number = gmp_init($number);
        
        for ($i = 0; $i < 2000; $i++) {
            $number = gmp_xor($number, gmp_mul($number, 64));
            $outcome = gmp_mod($number, 16777216);
            $number = gmp_xor($number, gmp_div($outcome, 32));
            $outcome = gmp_mod($number, 16777216);
            $number = gmp_xor($number, gmp_mul($outcome, 2048));
            $outcome = gmp_mod($number, 16777216);
        }

        // echo $original . ': ' . $outcome . PHP_EOL;
        $sum = gmp_add($sum, $outcome);
    }
    return $sum;
}

$sw->start();
echo 'What is the sum of the 2000th secret number generated by each buyer? ' . part_one($numbers) . ' (' . $sw->ellapsed() . ')' . PHP_EOL;

function part_two(): int {
    return 0;
}

$sw->start();
echo 'What is the most bananas you can get? ' . part_two($numbers) . ' (' . $sw->ellapsed() . ')' . PHP_EOL;
